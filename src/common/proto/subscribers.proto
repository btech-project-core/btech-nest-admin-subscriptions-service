syntax = "proto3";

package subscribers;

service SubscribersService {
  rpc FindUserByUsername(FindUserByUsernameRequest) returns (LoginUserResponse);
  rpc FindUserById(FindUserByIdRequest) returns (TwoFactorUserResponse);
  rpc FindUserProfile(FindUserByIdRequest) returns (UserProfileResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UserProfileResponse);
  rpc FindByDomainOrSubscriptionDetailId(FindByDomainOrSubscriptionDetailIdRequest) returns (FindByDomainOrSubscriptionDetailIdResponse);
  rpc GetSubscriberInfo(GetSubscriberInfoRequest) returns (SubscriberInfoResponse);
  rpc FindSubscribersWithNaturalPersons(FindSubscribersWithNaturalPersonsRequest) returns (FindSubscribersWithNaturalPersonsResponse);
  rpc RegisterSubscriber(RegisterSubscriberRequest) returns (RegisterSubscriberResponse);
  rpc SetPassword(SetPasswordRequest) returns (SetPasswordResponse);
  rpc ValidateSubscriberAlertLevel(ValidateSubscriberAlertLevelRequest) returns (ValidateSubscriberAlertLevelResponse);
  rpc DeleteSubscriber(DeleteSubscriberRequest) returns (DeleteSubscriberResponse);
  rpc GetSubscribersByBusiness(GetSubscribersByBusinessRequest) returns (GetSubscribersByBusinessResponse);
}

// ===== REQUESTS =====
message RegisterSubscriberRequest {
  string username = 1;
  string password = 2;
  string naturalPersonId = 3;
  string domain = 4;
  string service = 5;
}

message RegisterSubscriberResponse {
  string subscriberId = 1;
  string username = 2;
}


message FindUserByUsernameRequest {
  string username = 1;
  string domain = 2;
  string service = 3;
}

message FindUserByIdRequest {
  string subscriberId = 1;
  string service = 2;
}

message UpdateUserRequest {
  string subscriberId = 1;
  optional string twoFactorSecret = 2;
  optional bool isTwoFactorEnabled = 3;
}

message GetSubscriberInfoRequest {
  string subscriberId = 1;
  string service = 2;
}

message FindSubscribersWithNaturalPersonsRequest {
  string subscriptionDetailId = 1;
  optional int32 page = 2;
  optional int32 limit = 3;
  optional string term = 4;
  repeated string subscriberIds = 5;
}

// ===== RESPONSE PARA LOGIN =====
message LoginSubscriptionData {
  string subscriptionId = 1;
  string subscriptionBussineId = 2;
  string subscriptionDetailId = 3;
  string status = 4;
  optional string storageId = 5;
}

message LoginUserResponse {
  string subscriberId = 1;
  string username = 2;
  bool isTwoFactorEnabled = 3;
  string service = 4;
  repeated string roles = 5;
  optional string twoFactorSecret = 6;
  optional string password = 7;
  LoginSubscriptionData subscription = 8;
}

// ===== RESPONSE PARA 2FA =====
message TwoFactorUserResponse {
  string subscriberId = 1;
  string username = 2;
  string url = 3;
  bool isTwoFactorEnabled = 4;
  optional string twoFactorSecret = 5;
  optional string hashedPassword = 6;
}

// ===== RESPONSE PARA USER PROFILE COMPLETO =====
message PersonInformation {
  string informationType = 1;
  string description = 2;
}

message NaturalPerson {
  string naturalPersonId = 1;
  string personId = 2;
  string fullName = 3;
  string paternalSurname = 4;
  string maternalSurname = 5;
  string documentNumber = 6;
  string documentType = 7;
  repeated PersonInformation personInformation = 8;
}

message PersonInfo {
  string personId = 1;
  string fullName = 2;
}

message SubscriptionInfo {
  string subscriptionId = 1;
  string subscriptionBussineId = 2;
  string subscriptionDetailId = 3;
  string status = 4;
  string initialDate = 5;
  string finalDate = 6;
  optional string url = 7;
  PersonInfo person = 8;
}

message UserProfileResponse {
  string subscriberId = 1;
  string username = 2;
  bool isTwoFactorEnabled = 3;
  repeated string roles = 4;
  bool hasPassword = 5;
  NaturalPerson naturalPerson = 6;
  SubscriptionInfo subscription = 7;
}

message FindByDomainOrSubscriptionDetailIdRequest {
  string domain = 1;
  optional string modeCode = 2;
}

message FindByDomainOrSubscriptionDetailIdItem {
  optional string subscriptionDetailDesigneModeId = 1;
  string mode = 2;
  bool isPrimary = 3;
  optional string url = 4;
  optional string brandOne = 5;
  optional string brandTwo = 6;
  optional string brandThree = 7;
  optional string brandFour = 8;
  optional string primaryColor = 9;
  optional string secondaryColor = 10;
  optional string baseColor = 11;
  optional string infoColor = 12;
  optional string warningColor = 13;
  optional string successColor = 14;
  optional string errorColor = 15;
  optional string backgroundColor = 16;
  optional string surfaceColor = 17;
  optional string onPrimaryColor = 18;
  optional string onSecondaryColor = 19;
  optional string onBackgroundColor = 20;
  optional string onSurfaceColor = 21;
  optional string letterFont = 22;
}

message FindByDomainOrSubscriptionDetailIdResponse {
  repeated FindByDomainOrSubscriptionDetailIdItem configurations = 1;
}

message SubscriberInfoResponse {
  string subscriberId = 1;
  string username = 2;
  bool isTwoFactorEnabled = 3;
  repeated string roles = 4;
  NaturalPerson naturalPerson = 5;
  SubscriptionInfo subscription = 6;
}

message SubscriberWithNaturalPersonData {
  string subscriberId = 1;
  string username = 2;
  NaturalPerson naturalPerson = 3;
}

message FindSubscribersWithNaturalPersonsResponse {
  repeated SubscriberWithNaturalPersonData data = 1;
  int32 total = 2;
  int32 page = 3;
  int32 limit = 4;
  int32 totalPages = 5;
}

message SetPasswordRequest {
  string subscriberId = 1;
  string hashedPassword = 2;
}

message SetPasswordResponse {
  bool success = 1;
  string message = 2;
}

message ValidateSubscriberAlertLevelRequest {
  repeated string subscriberIds = 1;
  string levelAlertCode = 2;
}

message SubscriberAlertLevelValidation {
  string subscriberId = 1;
  bool hasAlertLevel = 2;
  optional int32 alertMinutesBefore = 3;
  optional string subscriptionDetailId = 4;
}

message ValidateSubscriberAlertLevelResponse {
  repeated SubscriberAlertLevelValidation data = 1;
}

message DeleteSubscriberRequest {
  string subscriberId = 1;
}

message DeleteSubscriberResponse {
  string message = 1;
}

message GetSubscribersByBusinessRequest {
  string subscriptionBussineId = 1;
  optional string service = 2;
  optional int32 page = 3;
  optional int32 limit = 4;
}

message SubscriberByBusiness {
  string subscriberId = 1;
  string role = 2;
  string fullName = 3;
  string paternalSurname = 4;
  string maternalSurname = 5;
  string documentNumber = 6;
  string documentType = 7;
  string createdAt = 8;
  string updatedAt = 9;
}

message GetSubscribersByBusinessResponse {
  repeated SubscriberByBusiness data = 1;
  int32 total = 2;
  int32 page = 3;
  int32 limit = 4;
  int32 totalPages = 5;
}